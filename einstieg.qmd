







# R, zweiter Blick




Benötigte R-Pakete für dieses Kapitel:

```{r}
library(tidyverse)
library(here)
```



## Lernsteuerung



###  Lernziele

- Sie können Funktionen, in R schreiben.
- Sie können Datensätze vom Lang- und Breit-Format wechseln.
- Sie können Wiederholungsstrukturen wie Mapping-Funktionen anwenden.
- Sie können eine dplyr-Funktion auf mehrere Spalten gleichzeitig anwenden.
- Sie können Textdaten analysieren.
- Sie können mit Pfaden (relativ und absolut) umgehen.
    


### Vorbereitung

Machen Sie sich mit den Grundlagen von R vertraut. 
Die Grundlagen von R können z.B. [im Online-Buch 'Statistik1', Kapitel 'Daten einlesen'](https://statistik1.netlify.app/020-r) wiederholt werden.




## Objekttypen in R

Näheres zu Objekttypen findet sich in @sauer_moderne_2019, Kap. 5.2.


### Überblick

In R ist praktisch alles ein Objekt. 

:::{#def-obj}
### Objekt (Informatik)
Ein Objekt meint ein im Computerspeicher repräsentiertes Ding, etwa eine Tabelle.$\square$
:::

:::{#exm-obs}
### Beispiele für Objekte
Vektoren und Dataframes (Tibbles) sind die vielleicht gängigsten Objektarten in R (vgl. @fig-obs), aus @sauer_moderne_2019).$\square$
:::

![Zentrale Objektarten in R](img/zentrale_objektarten.png){#fig-obs}


Es gibt in R keine (Objekte für) Skalare (einzelne Zahlen).
Stattdessen nutzt R Vektoren der Länge 1.

Ein nützliches Schema stammt aus @wickham_2023, s. @fig-objtypes).

![Objektarten hierarchisch gegliedert](img/data-structures-overview.png){#fig-objtypes width="50%"}




### Taxonomie

Unter *homogenen* Objektiven verstehen wir Datenstrukturen, 
die nur eine Art von Daten (wie Text oder Ganze Zahlen) fassen.
Sonstige Objekte nennen wir *heterogen*.


- Homogene Objekte
    - Vektoren 
    - Matrizen
- Heterogen
    - Liste
    - Dataframes (Tibbles)
    
    
    
#### Vektoren

*Vektoren* sind insofern zentral in R,
als dass die übrigen Datenstrukturen auf ihnen aufbauen, vgl.  @fig-vektorenimzentrum aus @sauer_moderne_2019.

Reine (atomare) Vektoren in R sind eine geordnete Liste von Daten eines Typs.


![Vektoren stehen im Zentrum der Datenstrukturen in R](img/Datenstrukturen.png){#fig-vektorenimzentrum}


```{r echo = TRUE}
ein_vektor <- c(1, 2, 3)
noch_ein_vektor <- c("A", "B", "C")
logischer_vektor <- c(TRUE, FALSE, TRUE)
```


Mit `str()` kann man sich die `Str`uktur eines Objektsausgeben lassen:

```{r echo = TRUE}
str(ein_vektor)
str(noch_ein_vektor)
str(logischer_vektor)
```


Vektoren können von folgenden Typen sein:

- Kommazahlen ( `double`) genannt
- Ganzzahlig (`integer`, auch mit `L` für *Long* abgekürzt)
- Text (´character`, String)
- logische Ausdrücke (`logical` oder `lgl`) mit `TRUE` oder `FALSE`


Kommazahlen und Ganze Zahlen zusammen bilden den Typ `numeric` (numerisch) in R.





Den Typ eines Vektors kann man mit `typeof()` ausgeben lassen:

```{r echo = TRUE}
typeof(ein_vektor)
```



#### Faktoren


```{r echo = TRUE}
sex <- factor(c("Mann", "Frau", "Frau"))
```

Interessant:

```{r echo = TRUE}
str(sex)
```


Vertiefende Informationen findet sich in @wickham_2023.

#### Listen

```{r echo = TRUE}
eine_liste <- list(titel = "Einführung",
                   woche = 1,
                   datum = c("2022-03-14", "2202-03-21"),
                   lernziele = c("dies", "jenes", "und noch mehr"),
                   lehre = c(TRUE, TRUE, TRUE)
                   )
str(eine_liste)
```




#### Tibbles

Für `tibble()` brauchen wir `tidyverse`:

```{r message=FALSE,  echo = TRUE}
library(tidyverse)
```


```{r tibble-ex, echo = TRUE}

studentis <-
  tibble(
    name = c("Anna", "Berta"),
    motivation = c(10, 20),
    noten = c(1.3, 1.7)
  )
str(studentis)
```



### Indizieren

Einen Teil eines Objekts auszulesen, bezeichnen wir als *Indizieren*.


#### Reine Vektoren

Zur Erinnerung:

```{r echo = TRUE}
str(ein_vektor)
```


```{r echo = TRUE}
ein_vektor[1]
ein_vektor[c(1,2)]
```

Aber *nicht* so:

```{r error=TRUE,  echo = TRUE}
ein_vektor[1,2]
```

Man darf Vektoren auch wie Listen ansprechen, also eine doppelte Eckklammer zum Indizieren verwenden

```{r}
ein_vektor[[2]]
```

Der Grund ist,
dass Listen auch Vektoren sind, nur eben ein besonderer Fall eines Vektors:


```{r}
is.vector(eine_liste)
```


Was passiert, wenn man bei einem Vektor der Länge 3 das 4. Element indiziert?

```{r echo = TRUE}
ein_vektor[4]
```

Ein schnödes `NA` ist die Antwort. Das ist interessant: 
Wir bekommen keine Fehlermeldung, sondern den Hinweis,
das angesprochene Element sei leer bzw. nicht verfügbar.


In @sauer_moderne_2019, Kap. 5.3.1 findet man weitere Indizierungsmöglichkeiten für reine Vektoren.



#### Listen

```{r echo = TRUE}
eine_liste %>% str()
```


Listen können wie Vektoren, also mit `[` ausgelesen werden. 
Dann wird eine Liste zurückgegeben.



```{r echo = TRUE}
eine_liste[1]
eine_liste[2]
```

Das hat den technischen Hintergrund,
dass Listen als eine bestimmte Art von Vektoren implementiert sind.


Mann kann auch die "doppelte Eckklammer", `[[` zum Auslesen verwenden;
dann wird anstelle einer Liste die einfachere Struktur eines Vektors zurückgegeben:


```{r echo = TRUE}
eine_liste[[1]]
```

Man könnte sagen,
die "äußere Schicht" des Objekts, die Liste,
wird abgeschält, und man bekommnt die "innere" Schicht,
den Vektor.


Mann die Elemente der Liste entweder mit ihrer Positionsnummer (1, 2, ...) oder,
sofern vorhanden, ihren Namen ansprechen:


```{r echo = TRUE}
eine_liste[["titel"]]
```


Dann gibt es noch den Dollar-Operator,
mit dem Mann benannte Elemente von Listen ansprechen kann:

```{r echo = TRUE}
eine_liste$titel
```

Man kann auch tiefer in eine Liste hinein indizieren.
Sagen wir, uns interessiert das 4. Element der Liste `eine_liste` - 
und davon das erste Element. 

Das geht dann so:

```{r echo = TRUE}
eine_liste[[4]][[1]] 
```


Eine einfachere Art des Indizierens von Listen bietet die Funktion `pluck()`, aus dem Paket `purrr`,
das Hilfen für den Umgang mit Listen bietet.


```{r echo = TRUE}
pluck(eine_liste, 4)
```


Und jetzt aus dem 4. Element das 1. Element:

```{r echo = TRUE}
pluck(eine_liste, 4, 1)
```


Probieren Sie mal, aus einer Liste der Länge 5 das 6. Element auszulesen:

```{r echo = TRUE}
eine_liste %>% length()
```

```{r echo = TRUE, error = TRUE}
eine_liste[[6]]
```

Unser Versuch wird mit einer Fehlermeldung quittiert.


Sprechen wir die Liste wie einen (atomaren) Vektor an,
bekommen wir hingegen ein `NA` bzw. ein `NULL`:

```{r echo = TRUE, error = TRUE}
eine_liste[6]
```

#### Tibbles

Tibbles lassen sich sowohl wie ein Vektor als auch wie eine Liste indizieren.


```{r echo = TRUE}
studentis[1]
```

Die Indizierung eines Tibbles mit der einfachen Eckklammer liefert einen Tibble zurück.

```{r echo = TRUE}
studentis["name"]
```
Mit doppelter Eckklammer bekommt man,
analog zur Liste, 
einen Vektor zurück:

```{r echo = TRUE}
studentis[["name"]]
```

Beim Dollar-Operator kommt auch eine Liste zurück:

```{r echo = TRUE}
studentis$name
```


### Weiterführende Hinweise

- [Tutorial](https://jennybc.github.io/purrr-tutorial/bk00_vectors-and-lists.html) zum Themen Indizieren von Listen von Jenny BC.


### Indizieren mit dem Tidyverse 

Natürlich kann man auch die Tidyverse-Verben zum Indizieren verwenden.
Das bietet sich an, wenn zwei Bedingungen erfüllt sind:

1. Wenn man einen Tibble als Input und als Output hat
2. Wenn man nicht programmieren möchte










## Pfade

Erfahrungsgemäß gibt es bei einigen Lernenden Probleme mit dem Importieren von Daten. 
Genauer gesagt machen die *Pfade* Probleme.

:::{.callout-tip}
Man arbeite in einem *RStudio-Projekt*. Dort lege man z.B. auch die Daten ab. Das macht das Arbeiten mit den Pfaden einfacher.
:::

Zentral für das Arbeiten mit Pfaden ist der Unterschied von *relativen* zu *absoluten* Pfaden.

:::{#exr-paths1}
Lesen Sich sich zum Unterschied von *relativen* zu *absoluten* Pfaden ein. [Hier](https://www.linkedin.com/pulse/difference-between-absolute-path-relative-linux-waqas-muazam/) oder [hier](https://www.r4epi.com/file-paths) finden Sie einen Ansatzpunkt.
:::



:::{#exm-pfade}
1. `"C:\Users\sebastian.sauer\Documents\Github\hans-hackathon\input\mtcars.csv"` ist ein *absoluter* Pfad.
2. `"input\mtcars.csv"` ist ein *relativer* Pfad.
:::

:::{#exr-paths-rel}
### Daten importieren mit relativem Pfad
Laden Sie den Datensatz `mtcars` herunter und kopieren Sie ihn in ein Unterverzeichnis Ihres Projektordners. Das Unterverzeichnis soll hießen `data`.
Dann importieren Sie den Datensatz, wobei Sie den Unterordner als *relativen* Pfad angeben:

```{r}
mtcars <- read.csv("input/mtcars.csv")
```

:::


{{< downloadthis input/mtcars.csv dname="mtcars" icon="database-fill-down" type="info" >}}


:::{#exr-path-abs}
### Daten importieren mit absolutem Pfad

Importieren Sie den Datensatz `mtcars` mit absolutem Pfad.
Was sind die Vor- und die Nachteile dieses Vorgehens? 
:::

```{r paths-abs}
#| error: true
#| eval: false
path_abs <- "C:\Users\sebastian.sauer\Documents\Github\hans-hackathon\input\mtcars.csv" # Pfad auf MEINER Maschine
mtcars <- read.csv(path_abs)
```



Ein Nachteil von absoluten Pfaden ist, dass sie nicht *portabel* sind:
*Mein* Pfad wird auf *Ihrem* Computer *nicht* funktionieren.

Eine Hilfe bietet da das Paket `here`, das das aktuelle RStudio-Arbeitsverzeichnis (working directory) zurückgibt:


```{r}
here()
```


Entsprechend können wir uns damit portablere absolute Pfade basteln:


```{r}
path_abs_portable <- paste0(here(),"/", "input/mtcars.csv")
path_abs_portable

mtcars <- read.csv(path_abs_portable)
```



:::{.callout-caution}
### Backslashes haben eine besondere Bedeutung in R
Wenn Sie Windows nutzen, ersetzen Sie am besten die Backslashes durch normale ("Forward-")Slashes,
das können Sie mit Search-Replace in RStudio erledigen.
:::


```{r paths-abs-forwad-slash}
#| error: true
path_abs <- "C:/Users/sebastian.sauer/Documents/Github/hans-hackathon/input/mtcars.csv"
mtcars <- read.csv(path_abs)
```


























## Datensätze von lang nach breit umformatieren


Manchmal findet man Datensätze im sog. *langen* Format vor,
manchmal im *breiten*.

In der Regel müssen die Daten "tidy" sein,
was meist dem langen Format entspricht, vgl.  @fig-langbreit aus @sauer_moderne_2019.


![Von lang nach breit und zurück](img/gather_spread.png){#fig-langbreit}



In einer neueren Version des Tidyverse werden diese beiden Befehle umbenannt bzw. erweitert, s. @fig-pivot-anim.

- `gather()` -> `pivot_longer()`
- `spread()` -> `pivot_wider()`

![Von "weit" zu "breit" und zurück, eine Animation](img/tidyr-pivoting.gif){#fig-pivot-anim width="50%"}


Weitere Informationen findet sich in @wickham_2023, in [diesem Abschnitt, 12.3](https://wickham_2023.had.co.nz/tidy-data.html?q=pivot_#pivoting).


## Funktionen

Eine Funktion kann man sich als analog zu einer Variable vorstellen.
Es ist ein Objekt, das nicht Daten, sondern Syntax beinhaltet, 
vgl.  @fig-funs aus @sauer_moderne_2019.

![Sinnbild einer Funktion](img/Funs_def.png){#fig-funs width="50%"}



```{r echo = TRUE}
mittelwert <- function(x){
  
  summe <- sum(x, na.rm = TRUE)
  mw <- summe/length(x)
  return(mw)
  
}
```

```{r  echo = TRUE}
mittelwert(c(1, 2, 3))
```






Es gibt viele Bücher und Webseiten, was eine Funktion (in R) ist, wozu sie gut ist und wie man sie schreibt und nutzt. Weitere Informationen finden sich in [Kapitel 19](https://wickham_2023.had.co.nz/functions.html) in @wickham_2023. 
Alternativ findet sich ein Abschnitt dazu (28.1) in @sauer_moderne_2019.



:::{#exr-fun1}
### Schreiben Sie eine einfache Funktion
Schreiben Sie eine einfache R-Funktion und erklären Sie sie.
:::



## Textverarbeitung


:::{.exm-text1}
Stellen Sie sich vor, Sie haben eine Menge Emails (ein paar Zehntausend), 
in denen Telefonnummern mit Durchwahlen zur Firma, in der Sie arbeiten vorkommen. 
Sie möchten alle Emails herausfischen, die eine solche Telefonnummer beinhaltet.
Da es viele Emails sind, möchten Sie die Mails nicht einzeln anpacken.
Sie bräuchten einen kleinen Roboter, dem Sie sinngemäß sagen könnten: 

>    [🧑‍🎓]{.content-visible when-format="html"}[\emoji{student}]{.content-visible when-format="pdf"} Hey, ich hätte gerne alle Mails mit den Telefonnummern in unseren Betrieb. Aber keine andere Mail bitte sehr.

>    [🤖]{.content-visible when-format="html"}[\emoji{robot}]{.content-visible when-format="pdf"} Jippiejeh, endlich geht's wieder los!
:::


Textvariablen erkennt man daran, dass ihr Inhalt mit doppelten oder einfachen Anführungszeichen ausgezeichnet ist:


```{r}
eine_antwort <- "Die Antwort lautet 42"
andere_antwort <- "Die Antwort lautet 73"
```


[Wickham](https://r4ds.had.co.nz/strings.html) bieten eine gute Einführung in die Analyse von Textvariablen bzw. Textdaten.


 


## Wiederholungen programmieren

Häufig möchte man eine Operation mehrfach ausführen.
Ein Beispiel wäre die Anzahl der fehlenden Werte pro Spalte auslesen.
Natürlich kann man die Abfrage einfach häufig tippen, nervt aber irgendwann.
Daher braucht's Strukturen, die *Wiederholungen* beschreiben.

Dafür gibt es verschiedene Ansätze.

### `across()`

Handelt es sich um Spalten von Tibbles, dann bietet sich die Funktion `across(.col, .fns)` an.
`across` wendet eine oder mehrere Funktionen (mit `.fns` bezeichnet) auf die Spalten `.col` an.

Das erklärt sich am besten mit einem Beispiel:


Natürlich hätte man in diesem Fall auch anders vorgehen können:

```{r echo = TRUE}
mtcars %>% 
  summarise(across(.cols = everything(),
                   .fns = mean))
```



Möchte man der Funktion `.fns` Parameter übergeben, so nutzt man diese Syntax ("Purrr-Lambda"):

```{r echo = TRUE}
mtcars %>% 
  summarise(across(.cols = everything(),
                   .fns = ~ mean(., na.rm = TRUE)))
```



[Hier](https://www.rebeccabarter.com/blog/2020-07-09-across/) findet sich ein guter Überblick zu `across()`. 



### `map()`

`map()` ist eine Funktion aus dem R-Paket `purrr` und Teil des Tidyverse.

`map(x, f)` wenden die Funktion `f` auf jedes Element von `x` an.
Ist `x` ein Tibble, so wird `f` demnach auf jede Spalte von `x` angewendet ("zugeordnet", daher `map`), vgl.  @fig-map1 aus @sauer_moderne_2019.



![Sinnbild für map aus purrr](img/wdh.png){#fig-map1 width="50%"}



Hier ein Beispiel-Code:

```{r echo = TRUE}
data(mtcars)

mtcars <- mtcars %>% select(1:3)  # nur die ersten 3 Spalten

map(mtcars, mean)
```


Möchte man der gemappten Funktion Parameter übergeben,
nutzt man wieder die "Kringel-Schreibweise":


```{r echo = TRUE}
map(mtcars, ~ mean(., na.rm = TRUE))
```


### Weiterführende Hinweise

Weiteres zu `map()` findet sich z.B. in @wickham_2023, [Kapitel 21.5](https://wickham_2023.had.co.nz/iteration.html#the-map-functions) oder in @sauer_moderne_2019, Kap. 28.2.

Hier ist ein [Tutorial](https://jennybc.github.io/purrr-tutorial/ls01_map-name-position-shortcuts.html) zu `map()` von Jenny BC.








## R war schwierig

Manche behaupten, R [sei ein Inferno](https://www.burns-stat.com/pages/Tutor/R_inferno.pdf).

Zum Glück gibt es auch aufmunternde Stimmen:

```{r}
praise::praise()
```


Programmieren war schwierig(er), als es noch keine KI-Bots gab.
Heutzutage ist es dank dieser Bots deutlich einfacher.
Nutzen Sie also diese Erleichterung ausgiebig.


Hat jemand sonst noch einen guten Rat für uns?
Vielleicht ist der häufigste Rat, dass man die [Dokumentation lesen solle](https://en.wikipedia.org/wiki/RTFM).




## Fallstudien

Hier finden Sie einige Fallstudien, die Ihnen die Inhalte dieses Kapitels näher bringen.


- [Fallstudie Flugverspätungen](https://data-se.netlify.app/2021/03/10/fallstudie-modellierung-von-flugversp%C3%A4tungen/)
 - [Fallstudie Getreideernte](https://juliasilge.com/blog/crop-yields/) 



